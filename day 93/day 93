from flask import Flask, render_template_string, request, redirect, url_for, session
import requests
import base64
import os
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

app = Flask(__name__)
app.secret_key = 'my_secret_key'  

# Spotify API credentials from environment variables
CLIENT_ID = os.getenv('CLIENT_ID')
CLIENT_SECRET = os.getenv('CLIENT_SECRET')

# HTML Template
HTML_TEMPLATE = """
<!doctype html>
<html lang="en">
<head>
    <title>Spotify Songs by Year</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; text-align: center; }
        form { margin-bottom: 20px; }
        .track { margin-bottom: 20px; }
        .pagination { margin-top: 20px; }
        button { padding: 10px 20px; font-size: 16px; }
        iframe { border-radius: 12px; }
    </style>
</head>
<body>
    <h1>üéµ Search Spotify Songs by Year</h1>
    <form method="POST">
        <input type="number" name="year" placeholder="Enter year (e.g., 2015)" required value="{{ year }}">
        <button type="submit">Search</button>
    </form>

    {% if tracks %}
        <h2>Showing songs from {{ year }} ({{ start_index + 1 }} - {{ start_index + tracks|length }} of {{ total }})</h2>
        {% for track in tracks %}
            <div class="track">
                <p><strong>{{ track['name'] }}</strong> by {{ track['artists'][0]['name'] }}</p>
                <iframe src="https://open.spotify.com/embed/track/{{ track['id'] }}" width="300" height="80" frameborder="0" allowtransparency="true" allow="encrypted-media"></iframe>
            </div>
        {% endfor %}
        <div class="pagination">
            {% if start_index >= 10 %}
                <a href="{{ url_for('index', year=year, offset=start_index-10) }}"><button>‚¨Ö Previous</button></a>
            {% endif %}
            {% if start_index + 10 < total %}
                <a href="{{ url_for('index', year=year, offset=start_index+10) }}"><button>Next ‚û°</button></a>
            {% endif %}
        </div>
    {% elif year %}
        <p>‚ùå No songs found for {{ year }}.</p>
    {% endif %}
</body>
</html>
"""

# === Function to get Spotify access token ===
def get_access_token(client_id, client_secret):
    auth_url = 'https://accounts.spotify.com/api/token'
    headers = {
        'Authorization': 'Basic ' + base64.b64encode(f"{client_id}:{client_secret}".encode()).decode('utf-8'),
        'Content-Type': 'application/x-www-form-urlencoded'
    }
    data = {'grant_type': 'client_credentials'}

    response = requests.post(auth_url, headers=headers, data=data)
    response.raise_for_status()
    return response.json()['access_token']


# === Function to search tracks by year with total count ===
def search_tracks_by_year(year, token, offset=0, limit=10):
    search_url = 'https://api.spotify.com/v1/search'
    headers = {'Authorization': f'Bearer {token}'}
    params = {
        'q': f'year:{year}',
        'type': 'track',
        'limit': limit,
        'offset': offset
    }

    response = requests.get(search_url, headers=headers, params=params)
    response.raise_for_status()
    data = response.json()
    tracks = data.get('tracks', {}).get('items', [])
    total = data.get('tracks', {}).get('total', 0)
    return tracks, total


# === Flask routes with pagination handling ===
@app.route('/', methods=['GET', 'POST'])
def index():
    year = request.form.get('year') if request.method == 'POST' else request.args.get('year')
    offset = int(request.args.get('offset', 0))

    tracks = []
    total = 0
    if year:
        if 'access_token' not in session:
            try:
                session['access_token'] = get_access_token(CLIENT_ID, CLIENT_SECRET)
            except requests.exceptions.HTTPError as e:
                return f"Error obtaining access token: {e}", 500

        try:
            tracks, total = search_tracks_by_year(year, session['access_token'], offset)
        except requests.exceptions.HTTPError:
            session.pop('access_token', None)
            return redirect(url_for('index', year=year, offset=offset))

    return render_template_string(
        HTML_TEMPLATE,
        tracks=tracks,
        year=year,
        start_index=offset,
        total=total
    )


if __name__ == '__main__':
    app.run(debug=True)
